import cyberpi
import event
import time

def updatescores(scores, newscore):
    '''
    Given current list of names and times and a new time entry,
    displys screen to input new name entry to list
    '''
    cyberpi.display.clear()
    cyberpi.controller.reset_count("any")
    #cyberpi doesn't allow displayed text to wrap easily so extra long string. cyberpi is 16 bits across.
    #5 spaces + ##### + 11 spaces + ##### + 6 spaces = 2 lines
    name = "     _____           *          "
    minute = newscore // 60
    sec = newscore % 60
    ups = 0
    downs = 0
    rights = 0
    lefts = 0
    a = 0
    is_Done=False
    entry1=5
    entry2=6
    while is_Done == False:
        while (cyberpi.controller.get_count("up") == ups and cyberpi.controller.get_count("down")==downs and
               cyberpi.controller.get_count("left")==lefts and cyberpi.controller.get_count("right")==rights
               and cyberpi.controller.get_count("a") == a):
            cyberpi.controller.is_press("up")
            cyberpi.controller.is_press("down")
            cyberpi.controller.is_press("left")
            cyberpi.controller.is_press("right")
            cyberpi.controller.is_press("a")
            #title is 4 lines long
            title="Congrats!       Your time is:      "+str(minute)+"min"+str(sec)+"sec"+"    Enter Name:     "
            #name input is 2 lines long
            #one more line for "press a to enter"
            cyberpi.display.show_label(title+name+"Press A to enter", 16, 'center')
            cyberpi.controller.is_press("up")
            cyberpi.controller.is_press("down")
            cyberpi.controller.is_press("left")
            cyberpi.controller.is_press("right")
            cyberpi.controller.is_press("a")
        if cyberpi.controller.get_count("right") != rights:
            entry1= entry1+1
            entry2= entry2+1
            if entry2==11:
                entry1=5
                entry2=6
            name = name[0:10] + (' '* (entry1+6))  + '*' + (' ' * (15-entry1))
            rights = rights +1
        elif cyberpi.controller.get_count("left") != lefts:
            entry1= entry1-1
            entry2= entry2-1
            if entry2==5:
                entry1=9
                entry2=10
            name = name[0:10] + (' '* (entry1+6))  + '*' + (' ' * (15-entry1))
            lefts = lefts +1
        elif cyberpi.controller.get_count("down") != downs:
            if name[entry1:entry2]=='_':
                name = name[0:5] + name[5:entry1]+'A'+name[entry2:10] + name[10:32]
            elif name[entry1:entry2]=='Z':
                name = name[0:5] + name[5:entry1]+'0'+name[entry2:10] + name[10:32]
            elif name[entry1:entry2]=='9':
                name = name[0:5] + name[5:entry1]+'_'+name[entry2:10] + name[10:32]
            elif 65 <= ord(name[entry1:entry2]) < 90:
                name = name[0:5] + name[5:entry1]+chr(ord(name[entry1:entry2])+1)+name[entry2:10] + name[10:32]
            elif 48 <= ord(name[entry1:entry2]) < 57:
                name = name[0:5] + name[5:entry1]+chr(ord(name[entry1:entry2])+1)+name[entry2:10] + name[10:32]
            downs = downs + 1
        elif cyberpi.controller.get_count("up") != ups:
            if name[entry1:entry2]=='_':
                name = name[0:5] + name[5:entry1]+'9'+name[entry2:10] + name[10:32]
            elif name[entry1:entry2]=='A':
                name = name[0:5] + name[5:entry1]+'_'+name[entry2:10] + name[10:32]
            elif name[entry1:entry2]=='0':
                name = name[0:5] + name[5:entry1]+'Z'+name[entry2:10] + name[10:32]
            elif 65 < ord(name[entry1:entry2]) <= 90:
                name = name[0:5] + name[5:entry1]+chr(ord(name[entry1:entry2])-1)+name[entry2:10] + name[10:32]
            elif 48 < ord(name[entry1:entry2]) <= 57:
                name = name[0:5] + name[5:entry1]+chr(ord(name[entry1:entry2])-1)+name[entry2:10] + name[10:32]
            ups = ups + 1
        elif cyberpi.controller.get_count("a") != a:
            cyberpi.display.clear()
            
            name = name[5:10]
            #scores ony holds 6 ranks, top line for "HIGHSCORES:" ony 7 lines can be displayed
            newentry = [name, newscore]
            rank = 0
            for tier in scores:
                #this code is a hot mess..... i should recode this part
                if tier == []:
                    if rank ==0:
                        scores= [newentry] + scores[0:5]
                        break
                    elif rank ==5:
                        scores = scores[0:5] + [newentry]
                    else:
                        scores = scores[0:rank] + [newentry] + scores[rank:6]
                        scores = scores[0:6]
                        break
                elif tier[1] > newentry[1]:
                    if rank == 0:
                        scores = [newentry] + scores[0:5]
                        break
                    elif rank == 5:
                        scores = scores[0:5] + [newentry]
                        break
                    else:
                        scores = scores[0:rank] + [newentry] + scores[rank:6]
                        scores = scores[0:6]
                        break
                elif rank == 5:
                    cyberpi.controller.reset_count("any")
                    while cyberpi.controller.get_count("a") == 0:
                        cyberpi.display.clear()
                        cyberpi.display.show_label("Sorry, you did  not make the    Leaderboards :C  Press A", 16, 'center')
                
                rank = rank +1
            is_Done = True    
    cyberpi.display.clear()
    return scores

def displayscores(scores):
    cyberpi.display.clear()
    display1 = "HIGHSCORES:     "
    place = 1
    for tier in scores:
        if tier == []:
            name='     '
            minute ="00"
            sec = "00"
            
        else:
            name = tier[0]
            time= tier[1]
            minute= str(time // 60)
            sec = str(time % 60)
            if len(minute)==1:
                minute = "0"+minute
            
            if len(sec)==1:
                sec = "0" + sec
                
        display1 = display1 + str(place)+'.'+name+' '+(minute)+'m'+(sec)+"s  "
        place = place + 1
    cyberpi.display.show_label(display1, 16, 'center')
    cyberpi.controller.reset_count("a")
    while cyberpi.controller.get_count("a") == 0:
        cyberpi.controller.is_press("a")
    return

# connect to WiFi

cyberpi.wifi.connect("Woah", "hellodudeman")
while not cyberpi.wifi.is_connect():
    pass

# Connection to WiFi is established at this point
# So, print connected! on the display

cyberpi.console.println('Connected!')

@event.mesh_broadcast('Green')
def intercept_mesh_broadcast():
	pass

cyberpi.mesh_broadcast.set("stop")
time.sleep(0.1)

Scores = [[],[],[],[],[],[]]

cyberpi.controller.reset_count("any")

#@event.mesh_broadcast("Green")
#def on_mesh_broadcast():
#    cyberpi.audio.play("spitfire")

#@event.mesh_broadcast('Green')
#def intercept_mesh_broadcast():
#	pass


while True:
    cyberpi.controller.reset_count("any")



    
    while cyberpi.controller.get_count("a") == 0:
        cyberpi.controller.is_press("a")
        cyberpi.display.show_label("Press A to start game!", 16, 'center')
    startgame = True
    ### Need to coordinate messages
    cyberpi.mesh_broadcast.set('Start Game',1)
    cyberpi.display.clear()
    start = time.time()

    while startgame == True:
        Green = 0
        Purple = 0
        Blue = 0
        G = 0
        P = 0
        B = 0
        
        keys_collected = "Keys collected: "
        while startgame == True:
            if Green == 1 and Purple == 1 and Blue == 1:
                endtime = time.time()
                newscore = endtime - start
                Scores = updatescores(Scores, newscore)
                displayscores(Scores)
                startgame = False
            
            cyberpi.mesh_broadcast.set('Green',2)
            if cyberpi.mesh_broadcast.get("Green") == 1 and G == 0:
                Green = 1
                G = 1
                cyberpi.display.clear()
                #cyberpi.display.show_label(keys_collected, 16, 'center')
                keys_collected += "Green "
                cyberpi.display.show_label(keys_collected, 16, 'center')
                
            cyberpi.mesh_broadcast.set('Purple',2)
            if cyberpi.mesh_broadcast.get("Purple") == 1 and P== 0:
                Purple = 1
                P = 1
                cyberpi.display.clear()
                #cyberpi.display.show_label(keys_collected, 16, 'center')
                keys_collected += "Red "
                cyberpi.display.show_label(keys_collected, 16, 'center')

            cyberpi.mesh_broadcast.set('Blue',2)
            if cyberpi.mesh_broadcast.get("Blue") == 1 and B==0:
                Blue = 1
                B = 1
                cyberpi.display.clear()
                #cyberpi.display.show_label(keys_collected, 16, 'center')
                keys_collected += "Blue "
                cyberpi.display.show_label(keys_collected, 16, 'center')
            
            cyberpi.display.show_label(keys_collected, 16, 'center')
            if cyberpi.controller.get_count('a') > 1:
                cyberpi.mesh_broadcast.set("a") 
                cyberpi.audio.play("spitfire"), cyberpi.display.clear(), cyberpi.display.show_label("SPEED BOOST!", 100, "center")
                cyberpi.led.on(208, 2, 27, "all")
                time.sleep(2)
                cyberpi.display.clear()
                cyberpi.controller.reset_count("a")

            if cyberpi.controller.is_press("b"):
                cyberpi.mesh_broadcast.set("b")

            if cyberpi.controller.is_press("up"):
                cyberpi.mesh_broadcast.set("up")
                cyberpi.led.on(208, 2, 27, "all")  # Turn on LED
                time.sleep(0.5)
                cyberpi.led.off("all")  # Turn off LED

            elif cyberpi.controller.is_press("down"):
                cyberpi.mesh_broadcast.set("down")
                cyberpi.led.on(208, 2, 27, "all")
                time.sleep(0.5)
                cyberpi.led.off("all")

            elif cyberpi.controller.is_press("left"):
                cyberpi.mesh_broadcast.set("left")
                cyberpi.led.on(208, 2, 27, "all")
                time.sleep(0.5)
                cyberpi.led.off("all")

            elif cyberpi.controller.is_press("right"):
                cyberpi.mesh_broadcast.set("right")
                cyberpi.led.on(208, 2, 27, "all")
                time.sleep(0.5)
                cyberpi.led.off("all")

            elif (not cyberpi.controller.is_press("up") and
                  not cyberpi.controller.is_press("down") and
                  not cyberpi.controller.is_press("left") and
                  not cyberpi.controller.is_press("right")):
              
                cyberpi.mesh_broadcast.set("stop")
                time.sleep(0.1)
